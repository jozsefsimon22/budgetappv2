@using System.ComponentModel.DataAnnotations
@using Shared.Entities
@using Shared.Enums
@inject DialogService DialogService

<RadzenTemplateForm TItem="FinancialTransaction" Data="@Transaction" Submit="@Submit">
    <div class="p-4" style="display: flex; flex-direction: column; gap: 1rem;">
        <!-- Name Field -->
        <div>
            <label>Name</label>
            <RadzenTextBox @bind-Value="Transaction.Name" Placeholder="Enter transaction name" Style="width: 100%;"/>
            <ValidationMessage For="() => Transaction.Name"/>
        </div>

        <!-- Amount Field -->
        <div>
            <label>Amount</label>
            <RadzenNumeric @bind-Value="Transaction.CurrentAmount" Placeholder="Enter amount" Style="width: 100%;"/>
            <ValidationMessage For="() => Transaction.CurrentAmount"/>
        </div>

        <!-- Transaction Type Dropdown -->
        <div>
            <label>Transaction Type</label>
            <RadzenDropDown Data="@_transactionTypes"
                            @bind-Value="Transaction.TransactionType"
                            Placeholder="Select transaction type"
                            Style="width: 100%;">
                <Template Context="data">
                    @Enum.GetName(typeof(TransactionType), data)
                </Template>
            </RadzenDropDown>
            <ValidationMessage For="() => Transaction.TransactionType"/>
        </div>

        <!-- IsRecurring Checkbox -->
        <div>
            <label style="display: flex; align-items: center;">
                <RadzenCheckBox @bind-Value="Transaction.IsRecurring"/>
                <span style="margin-left: 1rem">Is Recurring</span>
            </label>
        </div>

        <!-- Transaction Frequency Dropdown -->
        @if (Transaction.IsRecurring)
        {
            <div>
                <label>Transaction Frequency</label>
                <RadzenDropDown Data="_transactionFrequencies"
                                @bind-Value="Transaction.TransactionFrequency"
                                Placeholder="Select transaction frequency"
                                Style="width: 100%;">
                    <Template Context="data">
                        @Enum.GetName(typeof(TransactionFrequency), data)
                    </Template>
                </RadzenDropDown>
                <ValidationMessage For="() => Transaction.TransactionFrequency"/>
            </div>

            <!-- Start Date Picker -->
            <div>
                <label>Start Date</label>
                <RadzenDatePicker @bind-Value="Transaction.StartDate" DateFormat="MM/dd/yyyy" Placeholder="Select start date"
                                  Style="width: 100%;"/>
                <ValidationMessage For="() => Transaction.StartDate"/>
            </div>

            <!-- End Date Picker -->
            <div>
                <label>End Date (Optional)</label>
                <RadzenDatePicker @bind-Value="Transaction.EndDate" DateFormat="MM/dd/yyyy" Placeholder="Select end date"
                                  Style="width: 100%;"/>
            </div>
        }

        <!-- Buttons -->
        <div style="display: flex; justify-content: space-between; margin-top: 1rem;">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Add" Type="submit" Style="margin-right: 1rem;"/>
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Click="@Cancel"/>
        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter] public FinancialTransaction Transaction { get; set; } = new();
    
    // Enum data sources
    readonly IEnumerable<TransactionType> _transactionTypes = Enum.GetValues(typeof(TransactionType)).Cast<TransactionType>();
    readonly IEnumerable<TransactionFrequency> _transactionFrequencies = Enum.GetValues(typeof(TransactionFrequency)).Cast<TransactionFrequency>().Where(tf => tf != TransactionFrequency.OneTime);

    void Submit()
    {
        if (string.IsNullOrWhiteSpace(Transaction.Name) || Transaction.CurrentAmount <= 0)
        {
            // Add error handling or validation messages here if needed
            return;
        }

        // Pass the transaction back to the parent
        DialogService.Close(Transaction);
    }

    void Cancel()
    {
        // Close dialog without returning a value
        DialogService.Close(null);
    }

}