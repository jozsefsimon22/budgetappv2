@page "/transaction-history/{TransactionId:guid}"
@using Shared.Entities
@using System.Globalization
@using BudgetAppV2.Client.Pages.Dialogs
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject IFinancialTransactionService FinancialTransactionService


<h3>Transaction History</h3>

@if (_transaction == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <div style="display: flex; flex-direction: row; align-items: end; justify-content: space-between; padding: 10px; box-sizing: border-box">
            <div>
                <h4>@_transaction.Name</h4>
                <p>
                    <strong>Current Amount:</strong> @_transaction.CurrentAmount.ToString("C")
                </p>
                <p>
                    <strong>Start Date:</strong> @_transaction.StartDate.ToString("MM/dd/yyyy")
                </p>
                <p>
                    <strong>End Date:</strong> @(_transaction.EndDate?.ToString("MM/dd/yyyy") ?? "Ongoing")
                </p>
            </div>
            <div>
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Update"
                              Click="@OpenEditTransactionHistory">
                </RadzenButton>
            </div>
        </div>
        
        <RadzenDataGrid Data="@_transaction.History" TItem="FinancialTransactionHistory" ShowPagingSummary="true"
                        AllowPaging="false" PageSize="10" Style="height: 400px">
            <Columns>
                <RadzenDataGridColumn Property="Amount" Title="Amount" FormatString="{0:C}" Width="200px"/>
                <RadzenDataGridColumn Property="StartDate" Title="Start Date" FormatString="{0:MM/dd/yyyy}" Width="160px"/>
                <RadzenDataGridColumn Property="EndDate" Title="End Date" FormatString="{0:MM/dd/yyyy}" Width="160px"/>
            </Columns>
        </RadzenDataGrid>

        <RadzenChart Style="border-top: 1px solid lightgray; margin-top: 2rem">
            <RadzenChartTooltipOptions Shared="@sharedTooltip"/>
            <RadzenLineSeries Smooth="@smooth" Data="@_displayData" CategoryProperty="Date" Title="Amount"
                              LineType="LineType.Solid" ValueProperty="Revenue">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Square"/>
                <RadzenSeriesDataLabels Visible="@showDataLabels"/>
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" Step="50" LabelAutoRotation="45" Max="10"/>
            <RadzenValueAxis Formatter="@FormatAsGbp">
                <RadzenGridLines Visible="true"/>
                <RadzenAxisTitle Text="Amount"/>
            </RadzenValueAxis>
        </RadzenChart>


        <RadzenButton Style="margin-top: 2rem" ButtonStyle="ButtonStyle.Secondary" Icon="arrow_back" Text="Back"
                      Click="GoBack"/>

    </div>
}

@code {

    [Parameter] public Guid TransactionId { get; set; }

    private FinancialTransaction? _transaction;

    protected override async Task OnParametersSetAsync()
    {
        await FinancialTransactionService.GetFinancialTransactionById(TransactionId);
        _transaction = FinancialTransactionService.FinancialTransaction;

        _displayData = DisplayDataGenerator(_transaction!.History);
        _step = _displayData.Count > 20 ? 3 : 1;
    }


    class DataItem
    {
        public string Date { get; set; } = string.Empty;
        public double Revenue { get; set; }
    }

    async Task OpenEditTransactionHistory()
    {
        if (_transaction != null)
        {
            var result = await DialogService.OpenAsync<UpsertTransactionHistoryDialog>("Update Transaction History", new Dictionary<string, object>() { { "CurrentTransaction", _transaction } });
        }
    }

    private List<DataItem> DisplayDataGenerator(List<FinancialTransactionHistory> history)
    {
        List<DataItem> output = new List<DataItem>();

        history.ForEach(x =>
        {
            output.Add(new DataItem
            {
                Date = x.StartDate.ToString("MMM yyyy", CultureInfo.CurrentCulture),
                Revenue = x.Amount
            });
        });

        return output;
    }

    List<DataItem> _displayData = new List<DataItem>();
    int _step = 5;

    void GoBack()
    {
        Navigation.NavigateTo("/transactions");
    }

    //Test
    static string FormatAsGbp(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-GB"));
    }

    bool smooth = true;
    bool sharedTooltip = true;
    bool showDataLabels = true;
    bool showMarkers = true;
}