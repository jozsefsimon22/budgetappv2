@page "/transactions"
@using Shared.Entities
@using BudgetAppV2.Client.Pages.Dialogs
@inject IFinancialTransactionService FinancialTransactionService
@inject DialogService DialogService
@inject NavigationManager NavigationManager


@if (!FinancialTransactionService.FinancialTransactions.Any())
{
    <span>Loading....</span>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.SimpleWithMenu" AllowSorting="true" PageSize="20" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@FinancialTransactionService.FinancialTransactions" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedTransaction>
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle" Text="Add New Transaction"
                          Click="@OpenAddTransactionDialog"/>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(FinancialTransaction.TransactionType)" Title="Type Type" Width="160px"/>
            <RadzenDataGridColumn Title="Recurring" Width="160px" TextAlign="TextAlign.Center">
                <Template>
                    @((context.IsRecurring ? "Yes" : "No"))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(FinancialTransaction.TransactionFrequency)" Title="Frequency"
                                  Width="160px"/>
            <RadzenDataGridColumn Property="@nameof(FinancialTransaction.Name)" Title="Name" Width="200px"/>
            <RadzenDataGridColumn Property="@nameof(FinancialTransaction.CurrentAmount)" Title="Amount" Width="160px"
                                  TextAlign="TextAlign.Right" FormatString="{0:C}"/>
            <RadzenDataGridColumn Property="@nameof(FinancialTransaction.StartDate)" Title="Start Date" Width="160px"
                                  FormatString="{0:MM/dd/yyyy}"/>
            <RadzenDataGridColumn Property="@nameof(FinancialTransaction.EndDate)" Title="End Date" Width="160px"
                                  FormatString="{0:MM/dd/yyyy}"/>
            <RadzenDataGridColumn>
                <Template Context="transaction">
                    @if (transaction.IsRecurring)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="pageview"
                                      Click="@(args => ViewHistory(transaction.Id))">
                        </RadzenButton>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn>
                <Template Context="transaction">
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="edit"
                                  Click="@(args => OpenUpdateTransactionDialog(transaction))">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
} 


@code {
    List<FinancialTransaction> financialTransactionToInsert = new List<FinancialTransaction>();
    List<FinancialTransaction> financialTransactionToUpdate = new List<FinancialTransaction>();

    protected override async Task OnInitializedAsync()
    {
        await FinancialTransactionService.GetFinancialTransactions();
    }


    async Task OpenAddTransactionDialog()
    {
        // Open the dialog and await the result
        var result = await DialogService.OpenAsync<UpsertTransactionDialog>("Add Transaction", null);

        // Check if result is not null and of the expected type
        if (result is FinancialTransaction newTransaction)
        {
            // Add the new transaction and fetch new list
            await FinancialTransactionService.CreateFinancialTransaction(newTransaction);
            await FinancialTransactionService.GetFinancialTransactions();
            
            // Update the UI
            StateHasChanged();
        }
        else
        {
            // Handle cases where the dialog returns null or unexpected data
            Console.WriteLine("No valid transaction was returned from the dialog.");
        }
    }

    async Task OpenUpdateTransactionDialog(FinancialTransaction transaction)
    {
        // Create dialog parameters
        var parameters = new Dictionary<string, object>
        {
            { "Transaction", transaction } // Pass the transaction to the dialog
        };

        // Open the dialog and await the result
        var result = await DialogService.OpenAsync<UpsertTransactionDialog>("Update Transaction", parameters);

        // Check if result is not null and of the expected type
        if (result is FinancialTransaction newTransaction)
        {
            // Add the new transaction to the collection
            FinancialTransactionService.FinancialTransactions.Add(newTransaction);

            // Update the UI
            StateHasChanged();
        }
        else
        {
            // Handle cases where the dialog returns null or unexpected data
            Console.WriteLine("No valid transaction was returned from the dialog.");
        }
    }

    async Task ViewHistory(Guid transactionId)
    {
        NavigationManager.NavigateTo($"/transaction-history/{transactionId}");
    }

    void Reset()
    {
        financialTransactionToInsert.Clear();
        financialTransactionToUpdate.Clear();
    }

    void Reset(FinancialTransaction financialTransaction)
    {
        financialTransactionToInsert.Remove(financialTransaction);
        financialTransactionToUpdate.Remove(financialTransaction);
    }

    async Task EditRow(FinancialTransaction financialTransaction)
    {
        financialTransactionToUpdate.Add(financialTransaction);
        // await 
    }


    IList<FinancialTransaction> _selectedTransaction;

}