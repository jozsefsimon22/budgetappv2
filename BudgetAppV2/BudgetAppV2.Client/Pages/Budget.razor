@page "/budget"
@using System.Collections.ObjectModel
@using BudgetAppV2.Client.Pages.Dialogs
@using Shared.Entities
@using Shared.Enums
@inject DialogService DialogService


<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@transactions" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@_selectedTransaction">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle" Text="Add New Transaction"
                      Click="@OpenAddTransactionDialog"/>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(FinancialTransaction.TransactionType)" Title="Type Type" Width="200px"/>
        <RadzenDataGridColumn Title="Recurring" Width="160px" TextAlign="TextAlign.Center">
            <Template>
                @((context.IsRecurring ? "Yes" : "No"))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="FinancialTransaction.TransactionFrequency" Title="Frequency" Width="200px"/>
        <RadzenDataGridColumn Property="FinancialTransaction.Name" Title="Name" Width="200px"/>
        <RadzenDataGridColumn Property="FinancialTransaction.CurrentAmount" Title="Amount" Width="160px" TextAlign="TextAlign.Right" FormatString="{0:C}"/>
        <RadzenDataGridColumn Property="FinancialTransaction.StartDate" Title="Start Date" Width="160px" FormatString="{0:MM/dd/yyyy}"/>
        <RadzenDataGridColumn Property="FinancialTransaction.EndDate" Title="End Date" Width="160px" FormatString="{0:MM/dd/yyyy}"/>
        <RadzenDataGridColumn Property="RadzenButton"><RadzenButton>View History</RadzenButton></RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    List<FinancialTransaction> financialTransactionToInsert = new List<FinancialTransaction>();
    List<FinancialTransaction> financialTransactionToUpdate = new List<FinancialTransaction>();
    ObservableCollection<FinancialTransaction> transactions = new ObservableCollection<FinancialTransaction>();

    async Task OpenAddTransactionDialog()
    {
        // Open the dialog and await the result
        var result = await DialogService.OpenAsync<AddTransactionDialog>("Add Transaction", null);

        // Check if result is not null and of the expected type
        if (result is FinancialTransaction newTransaction)
        {
            // Add the new transaction to the collection
            transactions.Add(newTransaction);

            // Update the UI
            StateHasChanged();
        }
        else
        {
            // Handle cases where the dialog returns null or unexpected data
            Console.WriteLine("No valid transaction was returned from the dialog.");
        }
    }

    void Reset()
    {
        financialTransactionToInsert.Clear();
        financialTransactionToUpdate.Clear();
    }

    void Reset(FinancialTransaction financialTransaction)
    {
        financialTransactionToInsert.Remove(financialTransaction);
        financialTransactionToUpdate.Remove(financialTransaction);
    }

    async Task EditRow(FinancialTransaction financialTransaction)
    {
        financialTransactionToUpdate.Add(financialTransaction);
        // await 
    }

    protected override Task OnInitializedAsync()
    {
        transactions = new ObservableCollection<FinancialTransaction>
        {
            new FinancialTransaction
            {
                Id = Guid.NewGuid(),
                TransactionType = TransactionType.Expense,
                IsRecurring = true,
                TransactionFrequency = TransactionFrequency.Monthly,
                Name = "Netflix Subscription",
                CurrentAmount = 20.99,
                StartDate = new DateTime(2024, 1, 1),
                EndDate = new DateTime(2024, 2, 1),
                History = new[]
                {
                    new FinancialTransactionHistory()
                    {
                        Amount = 15.99,
                        StartDate = new DateTime(2023, 1, 1),
                        EndDate = new DateTime(2024, 1, 1)
                    }
                }
            },
            new FinancialTransaction
            {
                Id = Guid.NewGuid(),
                TransactionType = TransactionType.Income,
                IsRecurring = true,
                TransactionFrequency = TransactionFrequency.Monthly,
                Name = "Salary",
                CurrentAmount = 3200,
                StartDate = new DateTime(2023, 1, 1),
                EndDate = null,
                History = new[]
                {
                    new FinancialTransactionHistory()
                    {
                        Amount = 2500.00,
                        StartDate = new DateTime(2022, 6, 15),
                        EndDate = new DateTime(2023, 1, 1)
                    }
                }
            },
            new FinancialTransaction
            {
                Id = Guid.NewGuid(),
                TransactionType = TransactionType.Expense,
                IsRecurring = false,
                TransactionFrequency = TransactionFrequency.OneTime,
                Name = "New Laptop",
                CurrentAmount = 1000,
                StartDate = new DateTime(2025, 1, 1),
                EndDate = null,
                History = new[]
                {
                    new FinancialTransactionHistory()
                    {
                        Amount = 1200.00,
                        StartDate = new DateTime(2024, 2, 10),
                        EndDate = new DateTime(2024, 2, 10)
                    }
                }
            },
            new FinancialTransaction
            {
                Id = Guid.NewGuid(),
                TransactionType = TransactionType.Income,
                IsRecurring = false,
                TransactionFrequency = TransactionFrequency.OneTime,
                Name = "Freelance Project",
                CurrentAmount = 200,
                StartDate = new DateTime(2025, 02, 21),
                EndDate = null,
                History = new[]
                {
                    new FinancialTransactionHistory()
                    {
                        Amount = 800.00,
                        StartDate = new DateTime(2024, 1, 15),
                        EndDate = new DateTime(2023, 1, 1)
                    }
                }
            },
            new FinancialTransaction
            {
                Id = Guid.NewGuid(),
                TransactionType = TransactionType.Expense,
                IsRecurring = true,
                TransactionFrequency = TransactionFrequency.Monthly,
                Name = "Gym Membership",
                CurrentAmount = 25.00,
                StartDate = new DateTime(2023, 3, 1),
                EndDate = null,
                History = new[]
                {
                    new FinancialTransactionHistory()
                    {
                        Amount = 25.00,
                        StartDate = new DateTime(2023, 3, 1),
                        EndDate = new DateTime(2023, 1, 1)
                    }
                }
            },
            new FinancialTransaction
            {
                Id = Guid.NewGuid(),
                TransactionType = TransactionType.Expense,
                IsRecurring = false,
                TransactionFrequency = TransactionFrequency.OneTime,
                Name = "Concert Tickets",
                CurrentAmount = 150.00,
                StartDate = new DateTime(2024, 5, 20),
                EndDate = null,
                History = new[]
                {
                    new FinancialTransactionHistory()
                    {
                        Amount = 150.00,
                        StartDate = new DateTime(2024, 5, 20),
                        EndDate = new DateTime(2024, 5, 20)
                    }
                }
            }
        };

        return base.OnInitializedAsync();
    }

    IList<FinancialTransaction> _selectedTransaction;


}