@* @page "/transaction-history/{TransactionId:guid}" *@
@page "/transaction-history/"
@using Shared.Entities
@using Shared.Enums
@using System.Globalization

@inject NavigationManager Navigation
@* @inject HttpClient Http *@

<h3>Transaction History</h3>

@if (transaction == null)
{
    <p>Loading...</p>
}
else
{
    <h4>@transaction.Name</h4>
    <p><strong>Current Amount:</strong> @transaction.CurrentAmount.ToString("C")</p>
    <p><strong>Start Date:</strong> @transaction.StartDate.ToString("MM/dd/yyyy")</p>
    <p><strong>End Date:</strong> @(transaction.EndDate?.ToString("MM/dd/yyyy") ?? "Ongoing")</p>

    <RadzenDataGrid Data="@transaction.History" TItem="FinancialTransactionHistory" ShowPagingSummary="true"
                    AllowPaging="false" PageSize="10" Style="height: 400px">
        <Columns>
            <RadzenDataGridColumn Property="Amount" Title="Amount" FormatString="{0:C}" Width="200px" />
            <RadzenDataGridColumn Property="StartDate" Title="Start Date" FormatString="{0:MM/dd/yyyy}" Width="160px" />
            <RadzenDataGridColumn Property="EndDate" Title="End Date" FormatString="{0:MM/dd/yyyy}" Width="160px" />
        </Columns>
    </RadzenDataGrid>

    @* <RadzenChart> *@
    @*     <RadzenLineSeries Smooth="true" Title="History" CategoryProperty="Date" Data="@revenue2023"></RadzenLineSeries> *@
    @*     <RadzenMarkers Visible="true" MarkerType="MarkerType.Square" /> *@
    @*     <RadzenSeriesDataLabels Visible="true" /> *@
    @*     <RadzenCategoryAxis Padding="20" /> *@
    @*     <RadzenValueAxis Formatter="@FormatAsUSD"> *@
    @*         <RadzenGridLines Visible="true" /> *@
    @*         <RadzenAxisTitle Text="Revenue in USD" /> *@
    @*     </RadzenValueAxis> *@
    @* </RadzenChart> *@

    <RadzenChart Style="border-top: 1px solid lightgray; margin-top: 2rem">
        <RadzenChartTooltipOptions Shared="@sharedTooltip" />
        <RadzenLineSeries Smooth="@smooth" Data="@displayData" CategoryProperty="Date" Title="Amount" LineType="LineType.Solid" ValueProperty="Revenue">
            <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Square" />
            <RadzenSeriesDataLabels Visible="@showDataLabels" />
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="20" Step="50" LabelAutoRotation="45" Max="10" />
        <RadzenValueAxis Formatter="@FormatAsUSD">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Amount" />
        </RadzenValueAxis>
    </RadzenChart>
}

<RadzenButton Style="margin-top: 2rem" ButtonStyle="ButtonStyle.Secondary" Icon="arrow_back" Text="Back" Click="GoBack" />

@code {

    // [Parameter] public Guid TransactionId { get; set; }
    private FinancialTransaction? transaction = new FinancialTransaction
        {
            Id = Guid.NewGuid(),
            TransactionType = TransactionType.Expense,
            IsRecurring = true,
            TransactionFrequency = TransactionFrequency.Monthly,
            Name = "Netflix Subscription",
            CurrentAmount = 15.99,
            StartDate = new DateTime(2023, 1, 1),
            EndDate = null,
            History = new List<FinancialTransactionHistory>
            {
                new FinancialTransactionHistory { Amount = 12.99, StartDate = new DateTime(2021, 1, 1), EndDate = new DateTime(2021, 2, 28) },
                new FinancialTransactionHistory { Amount = 13.99, StartDate = new DateTime(2021, 3, 1), EndDate = new DateTime(2021, 4, 30) },
                new FinancialTransactionHistory { Amount = 24.99, StartDate = new DateTime(2021, 5, 1), EndDate = new DateTime(2021, 6, 30) },
                new FinancialTransactionHistory { Amount = 25.99, StartDate = new DateTime(2021, 7, 1), EndDate = new DateTime(2021, 8, 31) },
                new FinancialTransactionHistory { Amount = 26.99, StartDate = new DateTime(2021, 9, 1), EndDate = new DateTime(2021, 10, 31) },
                new FinancialTransactionHistory { Amount = 47.99, StartDate = new DateTime(2021, 11, 1), EndDate = new DateTime(2021, 12, 31) },
                new FinancialTransactionHistory { Amount = 68.99, StartDate = new DateTime(2022, 1, 1), EndDate = new DateTime(2022, 2, 28) },
                new FinancialTransactionHistory { Amount = 69.99, StartDate = new DateTime(2022, 3, 1), EndDate = new DateTime(2022, 4, 30) },
                new FinancialTransactionHistory { Amount = 70.99, StartDate = new DateTime(2022, 5, 1), EndDate = new DateTime(2022, 6, 30) },
                new FinancialTransactionHistory { Amount = 73.99, StartDate = new DateTime(2022, 7, 1), EndDate = new DateTime(2022, 8, 31) },
                new FinancialTransactionHistory { Amount = 78.99, StartDate = new DateTime(2022, 9, 1), EndDate = new DateTime(2022, 10, 31) },
                new FinancialTransactionHistory { Amount = 82.99, StartDate = new DateTime(2022, 11, 1), EndDate = new DateTime(2022, 12, 31) },
                new FinancialTransactionHistory { Amount = 91.99, StartDate = new DateTime(2023, 1, 1), EndDate = new DateTime(2023, 2, 28) },
                new FinancialTransactionHistory { Amount = 105.99, StartDate = new DateTime(2023, 3, 1), EndDate = new DateTime(2023, 4, 30) },
                new FinancialTransactionHistory { Amount = 106.99, StartDate = new DateTime(2023, 5, 1), EndDate = new DateTime(2023, 6, 30) },
                new FinancialTransactionHistory { Amount = 107.99, StartDate = new DateTime(2023, 7, 1), EndDate = new DateTime(2023, 8, 31) },
                new FinancialTransactionHistory { Amount = 108.99, StartDate = new DateTime(2023, 9, 1), EndDate = new DateTime(2023, 10, 31) },
                new FinancialTransactionHistory { Amount = 123.99, StartDate = new DateTime(2023, 11, 1), EndDate = new DateTime(2023, 12, 31) },
                new FinancialTransactionHistory { Amount = 124.99, StartDate = new DateTime(2024, 1, 1), EndDate = new DateTime(2024, 2, 29) },
                new FinancialTransactionHistory { Amount = 144.99, StartDate = new DateTime(2024, 3, 1), EndDate = new DateTime(2024, 4, 30) },
                new FinancialTransactionHistory { Amount = 152.99, StartDate = new DateTime(2024, 5, 1), EndDate = new DateTime(2024, 6, 30) },
                new FinancialTransactionHistory { Amount = 156.99, StartDate = new DateTime(2024, 7, 1), EndDate = new DateTime(2024, 8, 31) },
                new FinancialTransactionHistory { Amount = 158.99, StartDate = new DateTime(2024, 9, 1), EndDate = new DateTime(2024, 10, 31) },
                new FinancialTransactionHistory { Amount = 159.99, StartDate = new DateTime(2024, 11, 1), EndDate = new DateTime(2024, 12, 31) },
                new FinancialTransactionHistory { Amount = 173.99, StartDate = new DateTime(2025, 1, 1), EndDate = DateTime.Today }
            }
        };

    class DataItem
    {
        public string Date { get; set; }
        public double Revenue { get; set; }
    }

    private List<DataItem> DisplayDataGenerator(List<FinancialTransactionHistory> history)
    {
        List<DataItem> output = new List<DataItem>();

        history.ForEach(x =>
        {
            output.Add(new DataItem
                {
                    Date = x.StartDate.ToString("MMM yyyy", CultureInfo.CurrentCulture),
                    Revenue = (double)x.Amount!
                });
        });

        return output;
    }

    List<DataItem> displayData = new List<DataItem>();
    int _step = 5;
    

    protected override async Task OnInitializedAsync()
    {
        // Simulate fetching transaction data from an API
        // transaction = await Http.GetFromJsonAsync<FinancialTransaction>($"api/transactions/{TransactionId}");

        displayData = DisplayDataGenerator((List<FinancialTransactionHistory>)transaction!.History);
        _step = displayData.Count > 20 ? 3 : 1;
    }

    void GoBack()
    {
        Navigation.NavigateTo("/budget");
    }


    //Test
    DataItem[] revenue2023 = new DataItem[] {
        new DataItem
        {
            Date = "Jan",
            Revenue = 234000
        },
        new DataItem
        {
            Date = "Feb",
            Revenue = 269000
        },
        new DataItem
        {
            Date = "Mar",
            Revenue = 233000
        },
        new DataItem
        {
            Date = "Apr",
            Revenue = 244000
        },
        new DataItem
        {
            Date = "May",
            Revenue = 214000
        },
        new DataItem
        {
            Date = "Jun",
            Revenue = 253000
        },
        new DataItem
        {
            Date = "Jul",
            Revenue = 274000
        },
        new DataItem
        {
            Date = "Aug",
            Revenue = 284000
        },
        new DataItem
        {
            Date = "Sept",
            Revenue = 273000
        },
        new DataItem
        {
            Date = "Oct",
            Revenue = 282000
        },
        new DataItem
        {
            Date = "Nov",
            Revenue = 289000
        },
        new DataItem
        {
            Date = "Dec",
            Revenue = 294000
        }
    };

    DataItem[] revenue2024 = new DataItem[] {
        new DataItem
        {
            Date = "Jan",
            Revenue = 334000
        },
        new DataItem
        {
            Date = "Feb",
            Revenue = 369000
        },
        new DataItem
        {
            Date = "Mar",
            Revenue = 333000
        },
        new DataItem
        {
            Date = "Apr",
            Revenue = 344000
        },
        new DataItem
        {
            Date = "May",
            Revenue = 314000
        },
        new DataItem
        {
            Date = "Jun",
            Revenue = 353000
        },
        new DataItem
        {
            Date = "Jul",
            Revenue = 374000
        },
        new DataItem
        {
            Date = "Aug",
            Revenue = 384000
        },
        new DataItem
        {
            Date = "Sept",
            Revenue = 373000
        },
        new DataItem
        {
            Date = "Oct",
            Revenue = 382000
        },
        new DataItem
        {
            Date = "Nov",
            Revenue = 389000
        },
        new DataItem
        {
            Date = "Dec",
            Revenue = 394000
        }
    };

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-GB"));
    }

    bool smooth = true;
    bool sharedTooltip = true;
    bool showDataLabels = true;
    bool showMarkers = true;
}